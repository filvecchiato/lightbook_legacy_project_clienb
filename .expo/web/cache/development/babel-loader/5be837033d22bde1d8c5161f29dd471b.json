{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport config from \"./serviceConfig\";\nimport handleResponse from \"../helpers/handle-response\";\nimport AsyncStorage from '@react-native-community/async-storage';\nexport default {\n  login: login,\n  logout: logout,\n  currentUser: currentUserSubject.asObservable(),\n  currentUserValue: getToken()\n};\n\nfunction getToken() {\n  var token;\n  return _regeneratorRuntime.async(function getToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('currentUser'));\n\n        case 2:\n          token = _context.sent;\n          return _context.abrupt(\"return\", token);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction login(username, password) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch(config.apiUrl + \"/users/authenticate\", requestOptions).then(handleResponse).then(function (user) {\n    AsyncStorage.setItem('currentUser', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  localStorage.removeItem('currentUser');\n  currentUserSubject.next(null);\n}",
  "map": {
    "version": 3,
    "sources": [
      "/Users/filippovecchiato/Desktop/Desktop-prov/Codeworks/projects/lightbox_legacy/lightbox_legacy_project_client/services/authenticationService.js"
    ],
    "names": [
      "BehaviorSubject",
      "config",
      "handleResponse",
      "AsyncStorage",
      "login",
      "logout",
      "currentUser",
      "currentUserSubject",
      "asObservable",
      "currentUserValue",
      "getToken",
      "getItem",
      "token",
      "username",
      "password",
      "requestOptions",
      "method",
      "headers",
      "body",
      "JSON",
      "stringify",
      "fetch",
      "apiUrl",
      "then",
      "user",
      "setItem",
      "localStorage",
      "removeItem",
      "next"
    ],
    "mappings": ";AAAA,SAASA,eAAT,QAAgC,MAAhC;AACA,OAAOC,MAAP;AACA,OAAOC,cAAP;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,eAAe;AACbC,EAAAA,KAAK,EAALA,KADa;AAEbC,EAAAA,MAAM,EAANA,MAFa;AAGbC,EAAAA,WAAW,EAAEC,kBAAkB,CAACC,YAAnB,EAHA;AAIXC,EAAAA,gBAAgB,EAAEC,QAAQ;AAJf,CAAf;;AAOA,SAAeA,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACwBP,YAAY,CAACQ,OAAb,CAAqB,aAArB,CADxB;;AAAA;AACUC,UAAAA,KADV;AAAA,2CAEWA,KAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAASR,KAAT,CAAeS,QAAf,EAAyBC,QAAzB,EAAmC;AACjC,MAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA;AAAZ,KAAf;AAHe,GAAvB;AAMA,SAAOO,KAAK,CAAIpB,MAAM,CAACqB,MAAX,0BAAwCP,cAAxC,CAAL,CACJQ,IADI,CACCrB,cADD,EAEJqB,IAFI,CAEC,UAACC,IAAD,EAAU;AACZrB,IAAAA,YAAY,CAACsB,OAAb,CAAqB,aAArB,EAAoCN,IAAI,CAACC,SAAL,CAAeI,IAAf,CAApC;AACA,WAAOA,IAAP;AACH,GALI,CAAP;AAMD;;AAED,SAASnB,MAAT,GAAkB;AAEhBqB,EAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACApB,EAAAA,kBAAkB,CAACqB,IAAnB,CAAwB,IAAxB;AACD",
    "sourcesContent": [
      "import { BehaviorSubject } from 'rxjs';\nimport config from './serviceConfig';\nimport handleResponse from '../helpers/handle-response';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nexport default {\n  login,\n  logout,\n  currentUser: currentUserSubject.asObservable(),\n    currentUserValue: getToken(),\n};\n\nasync function getToken() {\n    const token = await AsyncStorage.getItem('currentUser')\n    return token;\n}\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n  };\n\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n    .then(handleResponse)\n    .then((user) => {\n        AsyncStorage.setItem('currentUser', JSON.stringify(user));\n        return user;\n    });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('currentUser');\n  currentUserSubject.next(null);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
