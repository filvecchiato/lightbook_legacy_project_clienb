{
  "ast": null,
  "code": "import * as actionTypes from \"./actionTypes\";\nimport imageService from \"./../../services/ImageService\";\nexport var getExploreImagesStart = function getExploreImagesStart() {\n  return {\n    type: actionTypes.GET_EXPLORE_IMAGES_START,\n    payload: null\n  };\n};\nexport var getExploreImagesSuccess = function getExploreImagesSuccess(data) {\n  return {\n    type: actionTypes.GET_EXPLORE_IMAGES_SUCCESS,\n    payload: data\n  };\n};\nexport var getExploreImagesFail = function getExploreImagesFail(error) {\n  return {\n    type: actionTypes.GET_EXPLORE_IMAGES_FAIL,\n    payload: error\n  };\n};\nexport var getExploreImages = function getExploreImages() {\n  return function (dispatch) {\n    dispatch(getExploreImagesStart());\n    imageService.getExploreImages().then(function (response) {\n      dispatch(getExploreImagesSuccess(response));\n    }).catch(function (error) {\n      console.log('get explore image redux error', error);\n      dispatch(getExploreImagesFail(error));\n    });\n  };\n};\nexport var getUserImagesStart = function getUserImagesStart() {\n  return {\n    type: actionTypes.GET_USER_IMAGES_START\n  };\n};\nexport var getUserImagesSuccess = function getUserImagesSuccess(data) {\n  return {\n    type: actionTypes.GET_USER_IMAGES_SUCCESS,\n    payload: data\n  };\n};\nexport var getUserImagesFail = function getUserImagesFail(error) {\n  return {\n    type: actionTypes.GET_USER_IMAGES_FAIL,\n    payload: error\n  };\n};\nexport var getUserImages = function getUserImages(userId) {\n  return function (dispatch) {\n    dispatch(getUserImagesStart());\n    imageService.getUserImages(userId).then(function (response) {\n      dispatch(getUserImagesSuccess(response.data));\n    }).catch(function (error) {\n      console.log('get user image redux error', error);\n      dispatch(getUserImagesFail(error));\n    });\n  };\n};\n\nvar uploadStart = function uploadStart() {\n  return {\n    type: actionTypes.UPLOAD_START\n  };\n};\n\nvar uploadSuccess = function uploadSuccess() {\n  return {\n    type: actionTypes.UPLOAD_SUCCESS\n  };\n};\n\nvar uploadFail = function uploadFail(error) {\n  return {\n    type: actionTypes.UPLOAD_FAIL,\n    payload: error\n  };\n};\n\nexport var uploadImage = function uploadImage(file, user_id) {\n  console.log(file);\n  var image = JSON.stringify(file);\n  console.log(image);\n  return function (dispatch) {\n    dispatch(uploadStart());\n    imageService.uploadImage(image, user_id).then(function (response) {\n      dispatch(uploadSuccess());\n    }).catch(function (error) {\n      dispatch(uploadFail(error));\n    });\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/filippovecchiato/Desktop/Desktop-prov/Codeworks/projects/lightbox_legacy/lightbox_legacy_project_client/store/actions/mediaActions.js"
    ],
    "names": [
      "actionTypes",
      "imageService",
      "getExploreImagesStart",
      "type",
      "GET_EXPLORE_IMAGES_START",
      "payload",
      "getExploreImagesSuccess",
      "data",
      "GET_EXPLORE_IMAGES_SUCCESS",
      "getExploreImagesFail",
      "error",
      "GET_EXPLORE_IMAGES_FAIL",
      "getExploreImages",
      "dispatch",
      "then",
      "response",
      "catch",
      "console",
      "log",
      "getUserImagesStart",
      "GET_USER_IMAGES_START",
      "getUserImagesSuccess",
      "GET_USER_IMAGES_SUCCESS",
      "getUserImagesFail",
      "GET_USER_IMAGES_FAIL",
      "getUserImages",
      "userId",
      "uploadStart",
      "UPLOAD_START",
      "uploadSuccess",
      "UPLOAD_SUCCESS",
      "uploadFail",
      "UPLOAD_FAIL",
      "uploadImage",
      "file",
      "user_id",
      "image",
      "JSON",
      "stringify"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import * as actionTypes from './actionTypes';\nimport imageService from './../../services/ImageService';\n\nexport const getExploreImagesStart = () => {\n  return {\n    type: actionTypes.GET_EXPLORE_IMAGES_START,\n    payload: null,\n  };\n};\n\nexport const getExploreImagesSuccess = (data) => {\n  return {\n    type: actionTypes.GET_EXPLORE_IMAGES_SUCCESS,\n    payload: data,\n  };\n};\n\nexport const getExploreImagesFail = (error) => {\n  return {\n    type: actionTypes.GET_EXPLORE_IMAGES_FAIL,\n    payload: error,\n  };\n};\n\nexport const getExploreImages = () => {\n  return (dispatch) => {\n    dispatch(getExploreImagesStart());\n    imageService\n      .getExploreImages()\n      .then((response) => {\n        dispatch(getExploreImagesSuccess(response));\n      })\n      .catch((error) => {\n        console.log('get explore image redux error', error);\n        dispatch(getExploreImagesFail(error));\n      });\n  };\n};\n\nexport const getUserImagesStart = () => {\n  return {\n    type: actionTypes.GET_USER_IMAGES_START,\n  };\n};\n\nexport const getUserImagesSuccess = (data) => {\n  return {\n    type: actionTypes.GET_USER_IMAGES_SUCCESS,\n    payload: data,\n  };\n};\n\nexport const getUserImagesFail = (error) => {\n  return {\n    type: actionTypes.GET_USER_IMAGES_FAIL,\n    payload: error,\n  };\n};\n\nexport const getUserImages = (userId) => {\n  return (dispatch) => {\n    dispatch(getUserImagesStart());\n    imageService\n      .getUserImages(userId)\n      .then((response) => {\n        dispatch(getUserImagesSuccess(response.data));\n      })\n      .catch((error) => {\n        console.log('get user image redux error', error);\n        dispatch(getUserImagesFail(error));\n      });\n  };\n};\n\nconst uploadStart = () => {\n  return {\n    type: actionTypes.UPLOAD_START\n  };\n};\n\nconst uploadSuccess = () => {\n  return {\n    type: actionTypes.UPLOAD_SUCCESS\n  };\n};\n\nconst uploadFail = (error) => {\n  return {\n    type: actionTypes.UPLOAD_FAIL,\n    payload: error\n  };\n};\n\nexport const uploadImage = (file, user_id) => {\n  console.log(file);\n  const image = JSON.stringify(file);\n  console.log(image)\n  return (dispatch) => {\n    dispatch(uploadStart());\n    imageService.uploadImage(image, user_id)\n      .then((response) => {\n        dispatch(uploadSuccess());\n      })\n      .catch((error) => {\n        dispatch(uploadFail(error));\n      });\n  };\n};"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
