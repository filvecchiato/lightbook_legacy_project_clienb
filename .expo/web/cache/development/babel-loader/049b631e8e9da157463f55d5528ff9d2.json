{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/filippovecchiato/Desktop/Desktop-prov/Codeworks/projects/lightbox_legacy/lightbox_legacy_project_client/screens/Upload.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { connect } from 'react-redux';\nimport * as actions from \"../store/actions\";\nimport * as ImagePicker from 'expo-image-picker';\n\nvar Upload = function Upload(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useFocusEffect(React.useCallback(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []));\n\n  var pickImage = function pickImage() {\n    var result, data, response;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1,\n              base64: true\n            }));\n\n          case 2:\n            result = _context2.sent;\n            setImage(result);\n            console.log(result);\n            data = {\n              file: result.base64,\n              upload_preset: 'ycbrw0p9'\n            };\n            response = fetch('https://api.cloudinary.com/v1_1/dcu4zpecp/image/upload', {\n              body: JSON.stringify(data),\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json'\n              }\n            }).then(function (response) {\n              return response.json();\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadImage = function uploadImage() {\n    var data;\n    return _regeneratorRuntime.async(function uploadImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = {\n              file: image.base64,\n              upload_preset: 'ycbrw0p9'\n            };\n            props.onUpload(data, props.user_id);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, image ? null : React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }\n  }), image ? React.createElement(React.Fragment, null, React.createElement(Image, {\n    source: {\n      uri: image.uri\n    },\n    style: {\n      width: 300,\n      height: 300\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.actions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    title: \"Upload\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Cancel\",\n    onPress: function onPress() {\n      return setImage(null);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }))) : null);\n};\n\nvar styles = StyleSheet.create({\n  actions: {\n    display: 'flex',\n    flexDirection: 'row'\n  }\n});\n\nvar mapState = function mapState(state) {\n  return {\n    user_id: state.general.user.user_id\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onUpload: function onUpload(file, user_id) {\n      return dispatch(actions.uploadImage(file, user_id));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Upload);",
  "map": {
    "version": 3,
    "sources": [
      "/Users/filippovecchiato/Desktop/Desktop-prov/Codeworks/projects/lightbox_legacy/lightbox_legacy_project_client/screens/Upload.js"
    ],
    "names": [
      "React",
      "useState",
      "useFocusEffect",
      "connect",
      "actions",
      "ImagePicker",
      "Upload",
      "props",
      "image",
      "setImage",
      "useCallback",
      "Platform",
      "OS",
      "requestCameraRollPermissionsAsync",
      "status",
      "alert",
      "pickImage",
      "launchImageLibraryAsync",
      "mediaTypes",
      "MediaTypeOptions",
      "All",
      "allowsEditing",
      "aspect",
      "quality",
      "base64",
      "result",
      "console",
      "log",
      "data",
      "file",
      "upload_preset",
      "response",
      "fetch",
      "body",
      "JSON",
      "stringify",
      "method",
      "headers",
      "then",
      "json",
      "uploadImage",
      "onUpload",
      "user_id",
      "flex",
      "alignItems",
      "justifyContent",
      "uri",
      "width",
      "height",
      "styles",
      "StyleSheet",
      "create",
      "display",
      "flexDirection",
      "mapState",
      "state",
      "general",
      "user",
      "mapDispatch",
      "dispatch"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, {useState} from 'react';\nimport { View, StyleSheet, Platform, Button, Image } from 'react-native';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions';\nimport * as ImagePicker from 'expo-image-picker';\n\nconst Upload = (props) => {\n  const [image, setImage] = useState(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      (async () => {\n        if (Platform.OS !== 'web') {\n          const {\n            status,\n          } = await ImagePicker.requestCameraRollPermissionsAsync();\n          if (status !== 'granted') {\n            alert('Sorry, we need camera roll permissions to make this work!');\n          }\n        }\n      })();\n    }, [])\n  );\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n      base64: true\n    });\n    setImage(result);\n    console.log(result)\n    const data = {\n      file: result.base64,\n      upload_preset: 'ycbrw0p9'\n    };\n\n    const response = fetch('https://api.cloudinary.com/v1_1/dcu4zpecp/image/upload', {\n      body: JSON.stringify(data),\n      method: 'POST',\n      headers: { 'content-type': 'application/json' }\n    }).then((response) => response.json()); // .then((response) => console.log(response));\n  };\n\n  const uploadImage = async () => {\n\n    const data = {\n      file: image.base64,\n      upload_preset: 'ycbrw0p9'\n    };\n\n    props.onUpload(data, props.user_id);\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      {image ? null : <Button title=\"Pick an image from camera roll\" onPress={pickImage} />}\n      {image ? (\n        <>\n          <Image\n            source={{ uri: image.uri }}\n            style={{ width: 300, height: 300 }}\n          />\n          <View style={styles.actions}> \n            <Button title=\"Upload\" onPress={() => uploadImage()} />\n            <Button title=\"Cancel\" onPress={() => setImage(null)} />\n          </View>\n        </>\n      ) : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  actions: {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n});\nconst mapState = (state) => {\n  return {\n    user_id: state.general.user.user_id\n  };\n};\n\nconst mapDispatch = (dispatch) => {\n  return {\n    onUpload: (file, user_id) => dispatch(actions.uploadImage(file, user_id)),\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Upload);\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
